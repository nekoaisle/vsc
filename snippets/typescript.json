{
	"if": {
		"prefix": "if ",
		"body": [
			"if ($1) {",
			"$2",
			"}"
		],
		"description": ""
	},
	"else if": {
		"prefix": "} else if ",
		"body": [
			"} else if ($1) {",
			"$2",
			"}"
		],
		"description": ""
	},
	"else": {
		"prefix": "} else ",
		"body": [
			"} else {",
			"$2",
			"}"
		],
		"description": ""
	},
	"for in": {
		"prefix": "for (let key in array) {",
		"body": [
			"for (let key in ${1:配列}) {",
			"\tlet val = ${1:配列}[key];",
			"}"
		],
		"description": "nekoaisle"
	},
	"for of": {
		"prefix": "for ",
		"body": [
			"for (let val of ${1:配列}) {",
			"}"
		],
		"description": "nekoaisle"
	},
	"switch": {
		"prefix": "switch() {",
		"body": [
			"switch (${1:var}) {",
			"\tcase '': {",
			"\t\tbreak;",
			"\t}",
			"\tdefault: {",
			"\t\tbreak;",
			"\t}",
			"}"
			],
		"description": "switch"
	},
	"case": {
		"prefix": "case '': {",
		"body": [
			"case '$1': {",
			"\tbreak;",
			"}"
			],
		"description": "switch case"
	},
	"modal": {
		"prefix": "let modal",
		"body": [
			"let modal = this.modalCtrl.create(${1:ページクラス});",
			"// モーダルページが閉じたときの処理",
			"modal.onDidDismiss((result: ${2:戻り値の型}) => {",
			"\tif (result) {",
			"\t\t",
			"\t}",
			"});",
			"// モーダルを開く",
			"modal.present();",
		],
		"description": "let modal = this.modalCtrl.create()"
	},
	"public onSubmit()": {
		"prefix": "public onSubmit()",
		"body": [
			"/**",
			"\t* [登録]ボタンを押した処理",
			"\t*/",
			"\tpublic onSubmit() {",
			"\tif (!this.checkOnSubmit()) {",
			"\t\t// エラーがある",
			"\t\treturn;",
			"\t}",
			"",
			"\tlet data = this.formGroup.value;",
			"",
			"\t// 戻り値を作成",
			"",
			"\t// モーダルを閉じる",
			"\tthis.viewCtrl.dismiss(ret);",
			"}",
		],
		"description": "public onSubmit()"
	},
	"public onCancel()": {
		"prefix": "public onCancel()",
		"body": [
			"/**",
			"\t* キャンセルボタンを押した",
			"\t*/",
			"public onCancel() {",
			"\tthis.viewCtrl.dismiss();",
			"}",
		],
		"description": "public onCancel()"
	},
	"alert mess": {
		"prefix": "alert",
		"body": [
			"let prompt = this.alertCtrl.create({",
			"\ttitle: '$1',",
			"\tmessage: '$2',",
			"\tbuttons: ['OK'],",
			"});",
			"prompt.present();",
		],
		"description": "メッセージ用 alert"
	},
	"toast": {
		"prefix": "toast",
		"body": [
			"let toast = this.toastCtrl.create({",
			"\tmessage: '',",
			"\tduration: 3000,",
			"\tposition: '${1|top,middle,bottom|}'",
			"});",
			"",
			"toast.onDidDismiss(() => {",
			"\tconsole.log('Dismissed toast');",
			"});",
			"",
			"toast.present();"
		],
		"description": "toast"
	},
	"promise new": {
		"prefix": "Promise",
		"body": [
			"Promise<$1>((resolve: (value?: $1) => void, reject: (reason?: any) => void) => {",
			"\t$2",
			"});",
		],
		"description": "new Promise"
	},
	"promise then": {
		"prefix": "then",
		"body": [
			"then((value: $1) => {",
			"\tresolve();",
			"}).catch((reason: any) => {",
			"\treject();",
			"});",
		],
		"description": "promise then"
	},
	"promise catch": {
		"prefix": "catch",
		"body": [
			"catch((reason: any) => {",
			"\treject(reason);",
			"});",
		],
		"description": "promise catch"
	}
}